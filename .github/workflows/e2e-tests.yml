name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: controle_estoque
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            tests/package-lock.json

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Install Test Dependencies
        working-directory: ./tests
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./tests
        run: npx playwright install --with-deps chromium

      - name: Create Database Tables
        run: |
          mysql -h 127.0.0.1 -u root -proot controle_estoque <<EOF
          CREATE TABLE IF NOT EXISTS usuarios (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(255) NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            senha VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS produtos (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(255) NOT NULL,
            categoria VARCHAR(255),
            descricao TEXT,
            unidade_medida VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS fornecedores (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(255) NOT NULL,
            cnpj VARCHAR(18) UNIQUE NOT NULL,
            telefone VARCHAR(20),
            email VARCHAR(255),
            endereco TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS lotes (
            id INT PRIMARY KEY AUTO_INCREMENT,
            produto_id INT NOT NULL,
            numero_lote VARCHAR(255) NOT NULL,
            quantidade_inicial DECIMAL(10,2) NOT NULL,
            quantidade_atual DECIMAL(10,2) NOT NULL DEFAULT 0,
            data_entrada DATE NOT NULL,
            data_validade DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            FOREIGN KEY (produto_id) REFERENCES produtos(id) ON DELETE CASCADE
          );
          CREATE TABLE IF NOT EXISTS movimentacoes (
            id INT PRIMARY KEY AUTO_INCREMENT,
            lote_id INT NOT NULL,
            usuario_id INT NOT NULL,
            fornecedor_id INT,
            tipo ENUM('ENTRADA', 'SAIDA') NOT NULL,
            quantidade DECIMAL(10,2) NOT NULL,
            numero_nf VARCHAR(255),
            data_movimentacao DATETIME NOT NULL,
            observacao TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (lote_id) REFERENCES lotes(id) ON DELETE CASCADE,
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
            FOREIGN KEY (fornecedor_id) REFERENCES fornecedores(id)
          );
          INSERT IGNORE INTO usuarios (nome, email, senha) VALUES ('Admin', 'admin@estoque.com', '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');
          EOF

      - name: Start Backend
        working-directory: ./backend
        run: |
          cp .env.example .env
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_USER=.*/DB_USER=root/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=root/' .env
          sed -i 's/DB_NAME=.*/DB_NAME=controle_estoque/' .env
          nohup npm run dev > backend.log 2>&1 &
          echo "Aguardando backend iniciar..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Backend iniciado com sucesso!"
              break
            fi
            echo "Tentativa $i/30..."
            sleep 2
          done

      - name: Start Frontend
        working-directory: ./frontend
        run: |
          nohup npm run dev > frontend.log 2>&1 &
          echo "Aguardando frontend iniciar..."
          for i in {1..60}; do
            if curl -s http://localhost:3001 > /dev/null; then
              echo "Frontend iniciado com sucesso!"
              break
            fi
            echo "Tentativa $i/60..."
            sleep 2
          done

      - name: Run E2E Tests
        working-directory: ./tests
        run: npx playwright test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 30

      - name: Upload Test Videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos
          path: tests/test-results/
          retention-days: 7
